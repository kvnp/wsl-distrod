name: CD

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  publish-release_assets:
    name: Publish the release assets
    runs-on: ubuntu-latest
    needs: [build-distrod_wsl_launcher]

    steps:
      - uses: actions/checkout@v2

      - name: Get the arch name
        run: |
          echo "ARCH_NAME=aarch64" >> $GITHUB_ENV

      - name: Download opt_distrod
        uses: actions/download-artifact@v2
        with:
          name: "opt_distrod-${{ env.ARCH_NAME }}"
          path: assets

      - name: Download distrod_wsl_launcher
        uses: actions/download-artifact@v2
        with:
          name: "distrod_wsl_launcher-${{ env.ARCH_NAME }}"
          path: "distrod_wsl_launcher-${{ env.ARCH_NAME }}"

      - name: Zip distrod_wsl_launcher
        run: |
          sudo apt update
          sudo apt install -y zip
          zip -r "distrod_wsl_launcher-${{ env.ARCH_NAME }}.zip" "distrod_wsl_launcher-${{ env.ARCH_NAME }}"
          mv "distrod_wsl_launcher-${{ env.ARCH_NAME }}.zip" assets/

      - name: Read the commit message and use it as a body of the new release
        shell: bash
        run: |
          release="$(git log $(echo ${{ github.ref }} | grep -o 'v.*') -1 --pretty=format:%B)"  # Use the commit message as the release message
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$release" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload Binaries to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: assets/*
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
          body: |
            ${{ env.RELEASE_BODY }}

  build-distrod_wsl_launcher:
    name: Build Distrod WSL launcher
    runs-on: windows-latest
    needs: [build-distrod-command]

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            distrod/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Get the arch name
        shell: bash
        run: |
          echo "ARCH_NAME=aarch64" >> $GITHUB_ENV

      - name: Download the Distrod's rootfs
        uses: actions/download-artifact@v2
        with:
          name: "distrod_root-${{ env.ARCH_NAME }}"
          path: rootfs

      - name: Build
        run: make -f windows.mk ROOTFS_PATH=rootfs/distrod_root.tar.gz distrod_wsl_launcher

      - name: Upload for the assets
        uses: actions/upload-artifact@v2
        with:
          name: "distrod_wsl_launcher-${{ env.ARCH_NAME }}"
          path: distrod/target/release/distrod_wsl_launcher.exe
          if-no-files-found: error

  build-distrod-command:
    name: Build distrod Linux command
    runs-on: ubuntu-latest

    needs: [build-portproxy-exe]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            distrod/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Get the arch name
        shell: bash
        run: |
          echo "ARCH_NAME=aarch64" >> $GITHUB_ENV

      - name: Download portproxy.exe
        uses: actions/download-artifact@v2
        with:
          name: "portproxy-${{ env.ARCH_NAME }}"
          path: distrod/target/release

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get install -y patchelf
          sudo apt-get install -y apt-file; sudo apt-file update
          sudo update-alternatives --set gcc /usr/bin/aarch64-linux-gnu-gcc
          rustup target add aarch64-unknown-linux-gnu
          RUSTFLAGS="--target='aarch64-unknown-linux-gnu'" cargo install --git https://github.com/EmbarkStudios/cargo-about.git --rev b4d194a734215f55a88191236cd5112ddb198920

      - name: Build the Distrod command
        run: make distrod-release

      - name: Build the Distrod rootfs
        run: make OUTPUT_ROOTFS_PATH=distrod_root.tar.gz rootfs

      - name: Upload opt_distrod.tar.gz for the assets
        uses: actions/upload-artifact@v2
        with:
          name: "opt_distrod-${{ env.ARCH_NAME }}"
          path: opt_distrod.tar.gz
          if-no-files-found: error

      - name: Upload distrod_root.tar.gz for the Windows build
        uses: actions/upload-artifact@v2
        with:
          name: "distrod_root-${{ env.ARCH_NAME }}"
          path: distrod_root.tar.gz
          if-no-files-found: error

  build-portproxy-exe:
    name: Build portproxy.exe
    runs-on: windows-latest

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            distrod/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm64

      - name: Get the arch name
        shell: bash
        run: |
          echo "ARCH_NAME=aarch64" >> $GITHUB_ENV

      - name: Build
        run: make -f windows.mk portproxy.exe

      - name: Upload portproxy.exe for the Linux build
        uses: actions/upload-artifact@v2
        with:
          name: "portproxy-${{ env.ARCH_NAME }}"
          path: distrod/target/release/portproxy.exe
          if-no-files-found: error
